#!/bin/bash

# Colores para la salida
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # Sin color

# Función para escanear vulnerabilidades de dependencias
scan_dependencies() {
    local project_dir="$1"
    local severity_threshold="${2:-moderate}"

    echo -e "${YELLOW}Escaneando vulnerabilidades en dependencias...${NC}"

    # Cambiar al directorio del proyecto
    cd "$project_dir" || exit 1

    # Actualizar índice de npm
    npm cache clean --force
    npm install

    # Ejecutar auditoría de npm
    npm audit --audit-level="$severity_threshold" > vulnerability_report.json

    # Analizar resultados
    local total_vulnerabilities=$(jq '.vulnerabilities | length' vulnerability_report.json)
    local high_vulnerabilities=$(jq '.vulnerabilities[] | select(.severity == "high") | length' vulnerability_report.json)
    local critical_vulnerabilities=$(jq '.vulnerabilities[] | select(.severity == "critical") | length' vulnerability_report.json)

    echo -e "${YELLOW}Resumen de Vulnerabilidades:${NC}"
    echo -e "Total de vulnerabilidades: ${RED}$total_vulnerabilities${NC}"
    echo -e "Vulnerabilidades críticas: ${RED}$critical_vulnerabilities${NC}"
    echo -e "Vulnerabilidades altas: ${RED}$high_vulnerabilities${NC}"

    # Generar informe detallado
    if [ "$total_vulnerabilities" -gt 0 ]; then
        echo -e "${RED}Se encontraron vulnerabilidades. Generando informe detallado...${NC}"
        npm audit --json > detailed_vulnerability_report.json
        
        # Mostrar detalles de vulnerabilidades críticas y altas
        jq -r '.vulnerabilities | 
            to_entries[] | 
            select(.value.severity | test("high|critical")) | 
            "Paquete: \(.key)\nSeveridad: \(.value.severity)\nTítulo: \(.value.title)\nRuta: \(.value.path)\n"' \
            detailed_vulnerability_report.json
    else
        echo -e "${GREEN}No se encontraron vulnerabilidades.${NC}"
    fi
}

# Función para escanear dependencias con Snyk
scan_with_snyk() {
    local project_dir="$1"

    echo -e "${YELLOW}Escaneando vulnerabilidades con Snyk...${NC}"

    # Verificar si Snyk está instalado
    if ! command -v snyk &> /dev/null; then
        echo -e "${RED}Snyk no está instalado. Instalando...${NC}"
        npm install -g snyk
    fi

    # Cambiar al directorio del proyecto
    cd "$project_dir" || exit 1

    # Autenticar con Snyk (requiere token)
    if [ -z "$SNYK_TOKEN" ]; then
        echo -e "${RED}SNYK_TOKEN no configurado. Omitiendo escaneo con Snyk.${NC}"
        return 1
    fi

    # Escanear dependencias
    snyk test --json > snyk_vulnerability_report.json

    # Analizar resultados de Snyk
    local total_vulnerabilities=$(jq '.vulnerabilities | length' snyk_vulnerability_report.json)
    
    echo -e "${YELLOW}Resumen de Vulnerabilidades (Snyk):${NC}"
    echo -e "Total de vulnerabilidades: ${RED}$total_vulnerabilities${NC}"

    # Mostrar detalles de vulnerabilidades
    if [ "$total_vulnerabilities" -gt 0 ]; then
        jq -r '.vulnerabilities[] | 
            "Paquete: \(.packageName)\n" + 
            "Severidad: \(.severity)\n" + 
            "Título: \(.title)\n" + 
            "Descripción: \(.description)\n"' \
            snyk_vulnerability_report.json
    else
        echo -e "${GREEN}No se encontraron vulnerabilidades con Snyk.${NC}"
    fi
}

# Función principal
main() {
    local project_dir="${1:-.}"
    local scan_mode="${2:-basic}"

    echo -e "${YELLOW}Iniciando escaneo de vulnerabilidades...${NC}"

    # Escaneo básico con npm audit
    scan_dependencies "$project_dir"

    # Escaneo avanzado con Snyk (opcional)
    if [ "$scan_mode" == "advanced" ]; then
        scan_with_snyk "$project_dir"
    fi
}

# Ejecutar script
main "$@"
